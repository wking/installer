AWSTemplateFormatVersion: 2010-09-09
Description: Template for Openshift Cluster UPI Network Elements (Route53 & LBs)

Parameters:

  ClusterName:
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9]{0,31})$
    ConstraintDescription: Cluster name must be alphanumeric, start with a letter and a maximum of 32 characters
    Description: A short, representative cluster name to use for hostnames, etc.
    Type: String
  HostedZoneId:
    Description: The Route53 public zone ID to register the targets with (e.g Z21IXYZABCZ2A4)
    Type: String
  HostedZoneName:
    Description: The Route53 zone to register the targets with (No trailing dot - e.g. mycorp.com)
    Type: String
  PublicSubnets:
    Description: The internet-facing subnets
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnets:
    Description: The internal subnets
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: The VPC created resources will belong.
    Type: AWS::EC2::VPC::Id

Resources:

  ExtApiElb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join [ '-', [ 'api-ext', !Ref ClusterName, !Ref 'AWS::Region' ] ]
      IpAddressType: ipv4
      Subnets: !Ref PublicSubnets
      Type: network

  IntApiElb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join [ '-', [ 'api-int', !Ref ClusterName, !Ref 'AWS::Region' ] ]
      Scheme: internal
      IpAddressType: ipv4
      Subnets: !Ref PrivateSubnets
      Type: network

  IntDns:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: 'Managed by CloudFormation'
      Name: !Join ['.', [!Ref ClusterName, !Ref HostedZoneName]]
      VPCs:
        -
          VPCId: !Ref VpcId
          VPCRegion: !Ref 'AWS::Region'

  ExternalApiServerRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Alias record for the API server
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Join [ '.', [ 'api', !Ref ClusterName, !Join ['', [!Ref HostedZoneName, '.']] ] ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt ExtApiElb.CanonicalHostedZoneID
            DNSName: !GetAtt ExtApiElb.DNSName

  InternalApiServerRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: Alias record for the API server
      HostedZoneId: !Ref IntDns
      RecordSets:
        - Name: !Join [ '.', [ 'api', !Ref ClusterName, !Join ['', [!Ref HostedZoneName, '.']] ] ]
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt IntApiElb.CanonicalHostedZoneID
            DNSName: !GetAtt IntApiElb.DNSName

  ExternalApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ExternalApiTargetGroup
      LoadBalancerArn:
          Ref: ExtApiElb
      Port: 6443
      Protocol: TCP

  ExternalApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ExternalApiTargetGroup
      Port: 6443
      Protocol: TCP
      TargetType: ip
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  InternalApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: InternalApiTargetGroup
      LoadBalancerArn:
          Ref: IntApiElb
      Port: 6443
      Protocol: TCP

  InternalApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: InternalApiTargetGroup
      Port: 6443
      Protocol: TCP
      TargetType: ip
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  InternalServiceInternalListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: InternalServiceTargetGroup
      LoadBalancerArn:
          Ref: IntApiElb
      Port: 22623
      Protocol: TCP

  InternalServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: InternalServiceTargetGroup
      Port: 22623
      Protocol: TCP
      TargetType: ip
      VpcId:
        Ref: VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  RegisterTargetLambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref ClusterName, 'nlb', 'lambda', 'role']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: '/'
      Policies:
        -
          PolicyName: !Join ['-', [!Ref ClusterName, 'master', 'policy']]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: ["elasticloadbalancing:RegisterTargets", "elasticloadbalancing:DeregisterTargets"]
                Resource: !Ref InternalApiTargetGroup
              -
                Effect: "Allow"
                Action: ["elasticloadbalancing:RegisterTargets", "elasticloadbalancing:DeregisterTargets"]
                Resource: !Ref InternalServiceTargetGroup
              -
                Effect: "Allow"
                Action: ["elasticloadbalancing:RegisterTargets", "elasticloadbalancing:DeregisterTargets"]
                Resource: !Ref ExternalApiTargetGroup

  RegisterNlbIpTargets:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
          - "RegisterTargetLambdaIamRole"
          - "Arn"
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          def handler(event, context):
            elb = boto3.client('elbv2')
            if event['RequestType'] == 'Delete':
              elb.deregister_targets(TargetGroupArn=event['ResourceProperties']['TargetArn'],Targets=[{'Id': event['ResourceProperties']['TargetIp']}])
            elif event['RequestType'] == 'Create':
              elb.register_targets(TargetGroupArn=event['ResourceProperties']['TargetArn'],Targets=[{'Id': event['ResourceProperties']['TargetIp']}])
            responseData = {}
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['ResourceProperties']['TargetArn']+event['ResourceProperties']['TargetIp'])
      Runtime: "python3.7"
      Timeout: 120

Outputs:

  PrivateHostedZoneId:
    Description: Hosted zone ID for the private DNS - needed for private records
    Value: !Ref IntDns
  ExternalApiLoadBalancerName:
    Description: Full name of the External API load balancer created.
    Value: !GetAtt ExtApiElb.LoadBalancerFullName
  InternalApiLoadBalancerName:
    Description: Full name of the Internal API load balancer created.
    Value: !GetAtt IntApiElb.LoadBalancerFullName
  ApiServerDnsName:
    Description: Full hostname of the API server - Needed for ignition configs
    Value: !Join [ '.', [ 'api', !Ref ClusterName, !Ref HostedZoneName ] ]
  RegisterNlbIpTargetsLambda:
    Description: Lambda ARN useful to help register/deregister IP targets for these load balancers
    Value: !GetAtt RegisterNlbIpTargets.Arn
  ExternalApiTargetGroupArn:
    Description: ARN of External API target group
    Value: !Ref ExternalApiTargetGroup
  InternalApiTargetGroupArn:
    Description: ARN of Internal API target group
    Value: !Ref InternalApiTargetGroup
  InternalServiceTargetGroupArn:
    Description: ARN of internal service target group
    Value: !Ref InternalServiceTargetGroup
