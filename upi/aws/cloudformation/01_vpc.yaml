AWSTemplateFormatVersion: 2010-09-09
Description: Template for Best Practice VPC with 1-3 AZs

Parameters:
  AvailabilityZoneCount:
    ConstraintDescription: 'The number of availability zones (Min: 1, Max: 3)'
    Default: 1
    Description: 'How many AZs to create the VPC for (Min: 1, Max: 3)'
    MaxValue: 3
    MinValue: 1
    Type: Number
  SubnetBits:
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/19-27
    Default: 12
    Description: 'Size of each subnet to create within the availability zones. (Min: 5 = /27, Max: 13 = /19)'
    MaxValue: 13
    MinValue: 5
    Type: Number
  VpcCidr:
    AllowedPattern: |
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-4]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-24
    Default: 10.0.0.0/16
    Description: CIDR block for VPC
    Type: String

Conditions:
  DoAz2:
    !Or [!Equals [2, !Ref AvailabilityZoneCount], Condition: DoAz3]
  DoAz3:
    !Equals [3, !Ref AvailabilityZoneCount]

Outputs:
  PrivateSubnetIds:
    Description: Subnet IDs of the private subnets
    Value: !Join
    - ','
    - - !Ref PrivateSubnet
      - !If [DoAz2, !Ref PrivateSubnet2, !Ref 'AWS::NoValue']
      - !If [DoAz3, !Ref PrivateSubnet3, !Ref 'AWS::NoValue']
  PublicSubnetIds:
    Description: Subnet IDs of the public subnets
    Value: !Join
    - ','
    - - !Ref PublicSubnet
      - !If [DoAz2, !Ref PublicSubnet2, !Ref 'AWS::NoValue']
      - !If [DoAz3, !Ref PublicSubnet3, !Ref 'AWS::NoValue']
  VpcId:
    Description: ID of the newly created VPC
    Value: !Ref VPC

Resources:
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIP2:
    Type: AWS::EC2::EIP
    Condition: DoAz2
    Properties:
      Domain: vpc
  EIP3:
    Type: AWS::EC2::EIP
    Condition: DoAz3
    Properties:
      Domain: vpc
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: InternetGateway
      VpcId: VPC
  InboundEphemeralPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: PublicNetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '103'
  InboundHTTPPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: PublicNetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
  InboundHTTPSPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: PublicNetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
  InboundSSHPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId: PublicNetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value: AWS::StackName
      - Key: Network
        Value: Public
  NAT:
    Type: AWS::EC2::NatGateway
    DependsOn:
    - GatewayToInternet
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId: PublicSubnet
  NAT2:
    Type: AWS::EC2::NatGateway
    Condition: DoAz2
    DependsOn:
    - GatewayToInternet
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP2
        - AllocationId
      SubnetId: PublicSubnet2
  NAT3:
    Type: AWS::EC2::NatGateway
    Condition: DoAz3
    DependsOn:
    - GatewayToInternet
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP3
        - AllocationId
      SubnetId: PublicSubnet3
  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: PublicNetworkAcl
      PortRange:
        From: '0'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Application
        Value: AWS::StackName
      - Key: Network
        Value: Private
      VpcId: VPC
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: DoAz2
    Properties:
      Tags:
      - Key: Application
        Value: AWS::StackName
      - Key: Network
        Value: Private
      VpcId: VPC
  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Condition: DoAz3
    Properties:
      Tags:
      - Key: Application
        Value: AWS::StackName
      - Key: Network
        Value: Private
      VpcId: VPC
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
      - '0'
      - Fn::GetAZs: AWS::Region
      CidrBlock:
      - '3'
      - - VpcCidr
        - '6'
        - SubnetBits
      Tags:
      - Key: Application
        Value: AWS::StackName
      - Key: Network
        Value: Private
      VpcId: VPC
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: DoAz2
    Properties:
      AvailabilityZone:
      - '1'
      - Fn::GetAZs: AWS::Region
      CidrBlock:
      - '4'
      - - VpcCidr
        - '6'
        - SubnetBits
      Tags:
      - Key: Application
        Value: AWS::StackName
      - Key: Network
        Value: Private
      VpcId: VPC
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Condition: DoAz3
    Properties:
      AvailabilityZone:
      - '2'
      - Fn::GetAZs: AWS::Region
      CidrBlock:
      - '5'
      - - VpcCidr
        - '6'
        - SubnetBits
      Tags:
      - Key: Application
        Value: AWS::StackName
      - Key: Network
        Value: Private
      VpcId: VPC
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: PrivateRouteTable
      SubnetId: PrivateSubnet
  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: DoAz2
    Properties:
      RouteTableId: PrivateRouteTable2
      SubnetId: PrivateSubnet2
  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: DoAz3
    Properties:
      RouteTableId: PrivateRouteTable3
      SubnetId: PrivateSubnet3
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
      - Key: Application
        Value: AWS::StackName
      - Key: Network
        Value: Public
      VpcId: VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: InternetGateway
      RouteTableId: PublicRouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Application
        Value: AWS::StackName
      - Key: Network
        Value: Public
      VpcId: VPC
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
      - 0
      - !Cidr [!Ref VpcCidr, 6, !Ref SubnetBits]
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
      VpcId: VPC
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: DoAz2
    Properties:
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
      - 1
      - !Cidr [!Ref VpcCidr, 6, !Ref SubnetBits]
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
      VpcId: VPC
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Condition: DoAz3
    Properties:
      AvailabilityZone: !Select
      - 2
      - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select
      - 2
      - !Cidr [!Ref VpcCidr, 6, !Ref SubnetBits]
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
      VpcId: VPC
  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnet
  PublicSubnetNetworkAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: DoAz2
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnet2
  PublicSubnetNetworkAclAssociation3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: DoAz3
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnet3
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: DoAz2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: DoAz3
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3
  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT
      RouteTableId:
        Ref: PrivateRouteTable
  Route2:
    Type: AWS::EC2::Route
    Condition: DoAz2
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT2
      RouteTableId:
        Ref: PrivateRouteTable2
  Route3:
    Type: AWS::EC2::Route
    Condition: DoAz3
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT3
      RouteTableId:
        Ref: PrivateRouteTable3
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
      - Key: Name
        Value: !Ref AWS::StackName
